<chapter id="Functions">
  <title>Functions</title>
  <para>
    The purpose of this chapter is to outline the various functions that are
    accessible to the project.
  </para>

  <section id="int shell(void);">
    <title>int shell(void);</title>

    <para>
      This is the driver function of the shell. In this function,
      variables passed to other functions will be defined. The actual
      processs of the shell is very simple and is represented by this
      short block of pseudocode:
      <programlisting>
	while we are still accepting commands:
	    read in the buffer
            tokenize the buffer into 2 strings: the command and the arguments
            find the command in the function table, and run it with the arguments
      </programlisting>
    </para>
    
    <para>
      <funcsynopsis>
        <funcprototype>
          <funcdef>
            int <function>shell</function>
          </funcdef>
          <paramdef>
            <parameter>void</parameter>
          </paramdef>
        </funcprototype>
      </funcsynopsis>
    </para>

    <para>
      <function>shell</function> will run until instructed to leave or
      it encounters an unrecoverable error.
    </para>
    
    <para>
      <itemizedlist>
        <listitem>
          <formalpara>
	    <title><parameter>SHELL_EXIT_GRACEFUL</parameter> <returnvalue>220</returnvalue></title>
            <para>
	      Indicates that shell exited and there were no
	      complications
	    </para>
	  </formalpara>
	</listitem>
        <listitem>
          <formalpara>
            <title><parameter>SHELL_EXIT_STUMBLE</parameter> <returnvalue>-221</returnvalue></title>
            <para>
	      Indicates that shell exited and required extra steps to
	      leave gracefully.
	    </para>
	  </formalpara>
	</listitem>
        <listitem>
          <formalpara>
	    <title><parameter>SHELL_EXIT_FAIL</parameter> <returnvalue>-222</returnvalue></title>
            <para>
              Indicates that shell exited and the exit was not
              requested and was not recoverable.
	    </para>
	  </formalpara>
	</listitem>
      </itemizedlist>
    </para>
    
  </section>
  
  <section id="int parse_buffer(char *buffer, char *func_name, char *args);">
    <title>int parse_buffer(char *buffer, char *func_name, char *args);</title>
    <para>
      This function exists for a couple of reasons. First, the buffer
      must be tokenized into separate strings, one of which contains
      the name of the function, and the other which contains the
      arguments passed to the function. Secondly, the shell must be
      able to handle commands that are not perfectly typed into the
      user, such as unnecessary leading whitespaces.
    </para>
    <para>
      <funcsynopsis>
	<funcprototype>
	  <funcdef>
	    int <function>parse_buffer</function>
	  </funcdef>
	  <paramdef>
	    char *<parameter>BUFFER</parameter>
	  </paramdef>
	  <paramdef>
	    char *<parameter>FUNC_NAME</parameter>
	  </paramdef>
	  <paramdef>
	    char *<parameter>ARGUMENTS</parameter>
	  </paramdef>
	</funcprototype>
      </funcsynopsis>
    </para>
    
    <para>
      <function>parse_buffer</function> will walk down a string and
      return one of 4 possible exit codes.
    </para>
    
    <para>
      <itemizedlist>
	<listitem>
	  <formalpara>
	    <title><parameter>PARSER_FAIL_WHITESPACE</parameter> <returnvalue>-200</returnvalue></title>
	    <para>
	      Indicates that a string is all whitespace and thusly the
	      buffer contains no values to act on.
	    </para>
	  </formalpara>
	</listitem>
	<listitem>
          <formalpara>
	    <title><parameter>PARSER_FAIL_LONGNAME</parameter> <returnvalue>-201</returnvalue></title>
	    <para>
	      Indicates the command found in the buffer after parsing
	      is over the maximum allowed length for a command name.
	    </para>
	  </formalpara>
	</listitem>
	<listitem>
	  <formalpara>
	    <title><parameter>PARSER_WIN_SINGLETON</parameter> <returnvalue>210</returnvalue></title>
	    <para>
	      The buffer has been parsed successfully and only
	      contains one string. This string is the command
	      name. There are no arguments to pass to the called
	      function, a NULL chraracter array should be passed
	      instead.
	    </para>
	  </formalpara>
	</listitem>
	<listitem>
	  <formalpara>
	    <title><parameter>PARSER_WIN_HAS_ARGS</parameter> <returnvalue>211</returnvalue></title>
	    <para>
	      The buffer has been parsed successfully and contains a
	      command name as well as a variable length string
	      contains all the arguments to run the command with. The
	      argument string will contain no leading or ending
	      whitespace.
	    </para>
	  </formalpara>
	</listitem>
      </itemizedlist>
    </para>
    
    <para>
      Perhaps the best way to illustrate how parse_buffer works is
      with an example. If the buffer string supplanted by the user is
      as follows (with each character being represented inside of the
      brackets):
      <programlisting>
	[ ][d][a][t][e][ ][ ][-][s][ ][2][0][0][9][ ][ ][-][h][ ][ ][\n][\0]
      </programlisting>
      Then, parse_buffer will tokenize the string into two separate strings,
      which are:
      <programlisting>
	[d][a][t][e][\0]
	[-][s][ ][2][0][0][9][ ][ ][-][h][\0]
      </programlisting>
      Therefore, it will remove the whitespaces before the function name and
      between the function name and the first argument, but nothing else.
    </para>
  </section>

  <section id="PCB *PCB_alloc()">
    <title>PCB *PCB_alloc()</title>
    <para>
      The PCB_alloc function allocates the memory required for a PCB, and
      then returns a pointer to the PCB that it has allocated. The PCB_alloc
      function does not alter the values of the PCB at all. If the memory
      for the PCB could not be allocated, then NULL is returned.
    </para>
  </section>
  <section id="PCB *PCB_setup ( char*, int, int, PCBDLL** )">
    <title>PCB *PCB_setup ( char*, int, int, PCBDLL** )</title>
    <para>
      The PCB_setup function is used to create PCBs. It is passed with the
      following parameters:
      <programlisting>
	char* - the name of the process (8 characters or less)
	int - the priority of the process (greater than -127, less than 128)
	int - the state of the process (APPLICATION or SYSTEM)
	PCBDLL** - the array of available queues the process may go into
      </programlisting>
    </para>
    <para>
      First, the function makes some sanity checks to make sure the
      parameters are valid (including making sure the name does not match 
      any other processes that are in any queue). Next, the function will 
      call PCB_alloc to allocate the necessary memory. The function will 
      then set the values of the PCB to the values given by the parameters, 
      and then return a pointer to the PCB. If the function failed at any
      point for any reason, NULL will be returned.
    </para>
  </section>
  <section id="PCB *PCB_find ( char*, PCBDLL** )">
    <title>PCB *PCB_find ( char*, PCBDLL** )</title>
    <para>
      The PCB_find function is used to search for a process given the name
      and the queues in which it may exist. It requires the following
      parameters:
      <programlisting>
	char* - the name of the process (8 characters or less)
	PCBDLL** - the array of queues which may contain the process
      </programlisting>
    </para>
    <para>
      the PCB_find function will search for a process based on its name in
      the queues provided. The function will iterate through the PCBDLLs, 
      whose length is defined globally by TDF_QUEUES, and follow the pointers
      in each PCBDLL until it matches the name. The function will then
      return a pointer to be PCB if it is found, otherwise it will return
      NULL.
    </para>
  </section>
  <section id="int PCB_insert ( PCBDLL*, PCB* , int )">
    <title>int PCB_insert ( PCBDLL*, PCB* )</title>
    <para>
      The PCB_insert function will insert a PCB into a PCBDLL. This
      function requires the following parameters:
      <programlisting>
	PCBDLL* - a pointer to the PCBDLL to insert the PCB into
	PCB* - a pointer to the PCB to be inserterd
	int - the state which the PCB will be inserted into
      </programlisting>
    </para>
    <para>
      First, the function will check to see if the PCB* parameter is NULL,
      in which case nothing will be inserted and the function will return
      with an error code of 1. Next, a new PCBDLL (which is really just
      an element in the linked list) is allocated to store the new PCB.
      The PCBDLL given by the parameter is then iterated through, and the
      function will determine which is the proper position based on
      the priority of the PCB. Once determined, PCB_insert will then
      update the pointers of the new PCB, and the PCBs around the new PCB
      in the queue. Finally, the state of the PCB will be updated based
      on the parameter. The function will then return 0 if this was 
      successful.
    </para>
  </section>
  <section id="int PCB_remove ( PCB*, PCBDLL** )">
    <title>int PCB_remove ( PCB*, PCBDLL** )</title>
    <para>
      The PCB_remove function will remove a PCB from the queue in which
      it is stored in. The following parameters are required:
      <programlisting>
	PCB* - the pointer to the PCB to remove
	PCBDLL** - the array of queues in which a PCB may be located
      </programlisting>
    </para>
    <para>
      The PCB_remove function at first does a sanity check to make sure
      the PCB* parameter is not NULL, otherwise it will return 1. The
      function will then iterate through the array of queues, which is
      of length TDF_QUEUES, until it finds matches the PCB. If it cannot
      find the PCB in the queues, then nothing will be removed and 1 will
      be returned. If the PCB is found, then the surrounding pointers are
      updated and the PCBDLL which formerly contained the PCB is
      deallocated, but the PCB is not deallocated. If successful, a value
      of 0 is returned.
    </para>
  </section>
  <section id="int PCB_free ( PCB* )">
    <title>int PCB_free ( PCB* )</title>
    <para>
      The PCB_free function will deallocate the memory which contained a
      PCB. The following parameter is required:
      <programlisting>
        PCB*- the pointer to the PCB to be deallocted
      </programlisting>
      </para>
    <para>
      If the function is successful, a value of 0 will be returned.
      Otherwise, 1 will be returned.
    </para>
  </section>
  <section id="int PCB_print ( PCB* )">
    <title>int PCB_print ( PCB* )</title>
    <para>
      The PCB_print function will output the contents of a single PCB to
      stdout. The parameter is:
      <programlisting>
	PCB* - a pointer to the PCB
      </programlisting>
    </para>
    <para>
      The function simply goes through some if statements based
      on the values in the PCB to determine what to print.
    </para>
  </section>
  <section id="PCBDLL *PCBDLL_alloc ()">
    <title>PCBDLL *PCBDLL_alloc ()</title>
    The PCBDLL_alloc function takes no parameters, and simply allocates
    the memory required for a single PCBDLL node. The function then returns
    a pointer to the memory location of the new PCBDLL node.    
  </section>
  <section id="PCBDLL **PCBDLL_creation ( int )">
    <title>PCBDLL **PCBDLL_creation ( int )</title>
    <para>
      The PCBDLL_creation function will create an array of PCBDLLs based on
      the given integer parameter (which should be TDF_QUEUES). The
      parameter is as follows:
      <programlisting>
	int - the number of queues to be created (use TDF_QUEUES)
      </programlisting>
    </para>
    <para>
      If succesful, an array of PCBDLLs is allocated and returned.
    </para>
  </section>
  <section id="int PCBDLL_print ( PCBDLL* )">
    <title>int PCBDLL_print ( PCBDLL* )</title>
    <para>
      The PCBDLL_print function will output the contents of a PCBDLL list
      to stdout. The following parameter is required:
      <programlisting>
	PCBDLL* - the list to be printed
      </programlisting>
    </para>
    <para>
      The function will follow the pointers in each PCBDLL node and output
      the contents of each valid PCBDLL node, which is the PCB itself.
    </para>
  </section>

  <section id="int date(char *)">
    <title>int date(char *)</title>
    <para>
      The date function will accept char* as a parameter (which is typically
      just the command line argument). date will then print out the 
      system date, or set the system date if an argument of -s is given.
      The return value of date is an error code, 0 if it was successful,
      otherwise it will return 1.
    </para>
  </section>
  
  <section id="int display( char* )">
    <title>int display( char* )</title>
    <para>
      The display functon will output the contents of the current MPX
      directory. It accepts a parameter of char*, which will tell display
      which directory to look in. display will return an error code of a
      value other than 0 if it failed.
    </para>
  </section>
  
  <section id="int help(char *)">
    <title>int help(char *)</title>
    <para>
      The help function will output the list of commands that may be run.
      This function will accept a char* as a parameter, which is designated
      for the command that help will tell the user about. For example, one
      may run "help display" for information on the display command. help
      will return an error code other than 0 if it was not successful.
    </para>
  </section>

  <section id="int pcreate(char *, PCBDLL **)">
    <title>int pcreate(char *, PCBDLL **)</title>
    <para>
      pcreate accepts two parameters: char* and PCBDLL**, which are the
      process name and the array of the procss queues in the system. pcreate
      will create process, prompt users for the the information to be stored
      in the process (the state, class, and priority), and then place the
      process in the appropriate queue. The return value for pcreate is
      0 for successful, otherwise it is nonzero.
    </para>
  </section>

  <section id="int pdelete(char *, PCBDLL **)">
    <title>int pdelete(char *, PCBDLL **)</title>
    <para>
      pdelete accepts two parameters: char* and PCBDLL**, which are the
      process name and the array of the procss queues in the system. pdelete
      will then remove the process from the queue that it is found in, and
      then deallocate the PCB. The return value is 0 for successful, 
      nonzero for failure.
    </para>
  </section>

  <section id="int pblock(char *, PCBDLL **)">
    <title>int pblock(char *, PCBDLL **)</title>
    <para>
      pblock accepts two parameters: char* for the PCB name and PCBDLL** for
      the array for available queues. pblock will move the PCB with the
      corresponding name to the blocked or blocked-suspended queue if it
      is not already in one of those. Function will return an error code of 
      0 if successful, otherwise nonzero.
    </para>
  </section>
  
  <section id="int punblock(char *, PCBDLL **)">
    <title>int punblock(char *, PCBDLL **)</title>
    <para>
      punblock accepts two parametes: char* for the PCB name and PCBDLL** for
      the array of available queues. punblock will move the PCB with the
      corresponding name to the ready or ready-suspended queue if it is not
      already in one of those. Function will return an error code of 0 if it
      successful, otherwise nonzero.
    </para>
  </section>

  <section id="int psuspend(char *, PCBDLL **)">
    <title>int psuspend(char *, PCBDLL **)</title>
    <para>
      psuspend accepts two parameters: char* for the PCB name and PCBDLL** for
      the array of available queues. psuspend will move the PCB with the
      corresponding name to the ready-suspended or blocked-suspended queue 
      if it is not 
      already in one of those. Function will return an error code of 0 if it 
      successful, otherwise nonzero.
    </para>
  </section>

  <section id="int presume(char *, PCBDLL **)">
    <title>int presume(char *, PCBDLL **)</title>
    <para>
      presume accepts two parameters: char* for the PCB name and PCBDLL** for 
      the array of available queues. presume will move the PCB with the 
      corresponding name to the ready or blocked queue 
      if it is not already in one of those. Function will return an 
      error code of 0 if it successful, otherwise nonzero.
    </para>
  </section>

  <section id="int psetprio(char *, PCBDLL **)">
    <title>int psetprio(char *, PCBDLL **)</title>
    <para>
      psetprio accepts two parameters: char* for the arguemnts and PCBDLL** for
      the array of available queues. psetprio requires the following 
      arguments: the name of the PCB and the priority it must be set to.
      The function will then change the priority of the PCB, if found,
      to the appropriate values. Function will return 0 if successful,
      otherwise nonzero.
    </para>
  </section>

  <section id="pshow(char *, PCBDLL **)">
    <title>pshow(char *, PCBDLL **)</title>
    <para>
      pshow accepts the process name as a parameter and the array of
      available queues as the parameter. pshow will then search for the
      process and output information if it exists. Function will return 0
      if successful, otherwise nonzero.
    </para>
  </section>

  <section id="pshowall(PCBDLL **)">
    <title>pshowall(PCBDLL **)</title>
    <para>
      pshowall takes the array of available queues as the parameter.
      Function will output the contents of all the queues using PCBDLL_print.
      Function will return 0 if successful, otherwise nonzero.
    </para>
  </section>
  
  <section id="pshowrd(PCBDLL **)">
    <title>pshowrd(PCBDLL **)</title>
    <para>
      pshowrd takes the array of available queues as the parameter. Function
      will output the contents of the ready queue using PCBDLL_print. Function
      will return 0 if successful, otherwise nonzero.
    </para>
  </section>

  <section id="pshowblk(PCBDLL **)">
    <title>pshowblk(PCBDLL **)</title>
    <para>
      pshowblk takes the array of available queues as the parameter. Function
      will output the contents of the blocked queue using PCBDLL_print. 
      Function will return 0 if successful, otherwise nonzero.
    </para>
  </section>

</chapter>
