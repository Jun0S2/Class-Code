<chapter id="MPX Shell (SHELL.H)">
  <title>TDF Shell (<filename class="headerfile">SHELL.H</filename>)</title>
  <para>
    This chapter is used to illustrate the workings of <filename
    class="headerfile">SHELL.H</filename>, which is the user interface
    of TDF's MPX operating system.
  </para>

  <section id="int shell(void);">
    <title>int shell(void);</title>

    <para>
      <funcsynopsis>
        <funcprototype>
          <funcdef>
	    int <function>shell</function>
	  </funcdef>
          <paramdef>
            <parameter>void</parameter>
	  </paramdef>
	</funcprototype>
      </funcsynopsis>
    </para>
  </section>

  <section id="Return values">
    <title>Return Values</title>

    <para>
      <function>shell</function> will run until instructed to leave or
      it encounters an unrecoverable error.
    </para>

    <para>
      <itemizedlist>
        <listitem>
          <formalpara>
	    <title><parameter>SHELL_EXIT_GRACEFUL</parameter> <returnvalue>220</returnvalue></title>
            <para>
	      Indicates that shell exited and there were no
	      complications
	    </para>
	  </formalpara>
	</listitem>
        <listitem>
          <formalpara>
            <title><parameter>SHELL_EXIT_STUMBLE</parameter> <returnvalue>-221</returnvalue></title>
            <para>
	      Indicates that shell exited and required extra steps to
	      leave gracefully.
	    </para>
	  </formalpara>
	</listitem>
        <listitem>
          <formalpara>
	    <title><parameter>SHELL_EXIT_FAIL</parameter> <returnvalue>-222</returnvalue></title>
            <para>
              Indicates that shell exited and the exit was not
              requested and was not recoverable.
	    </para>
	  </formalpara>
	</listitem>
      </itemizedlist>
    </para>
  </section>
  
  <section id="Description">
    <title>Description</title>
    <para>
      This is the driver function of the shell. In this function,
      variables passed to other functions will be defined. The actual
      processs of the shell is very simple and is represented by this
      short block of pseudocode:
      <programlisting>
	while we are still accepting commands:
	  read in the buffer
          tokenize the buffer into 2 strings: the command and the arguments
          find the command in the function table, and run it with the arguments
      </programlisting>
    </para>
  </section>
</chapter>