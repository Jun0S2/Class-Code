<chapter id="Process Control Blocks (PCB.C)">
  <title>Process Control Blocks (PCB.C)</title>
  <para>
    The Process Control Blocks are data structures that define the various
    system and application processes, which exist in a number of queues. 
    There are two data structures defined in this chapter: the PCB (process
    control block), which holds attributes for each individual process, and the
    PCBDLL (process control block doubly linked list), which serves as the
    queue which contains the various PCBs.
  </para>

  <section id="PCB">
    <title>PCB</title>    
    <section id="struct PCB">
      <title>struct PCB</title>
      <para>
	The PCB structure contains the following values:
	<programlisting>
	  char name[8] - the name of the process (8 characters or less)
	  int pclass - the class of the process (APPLICATION or SYSTEM)
	  int priority - the priority of the process (between -127 and 128)
	  int state - the state of the process (which queue it's in)
	  unsigned char pstack[1024] - the memory stack of the PCB
	  int memsize - the size of the memory space
	  unsigned char *loadaddr - the load address of the memory
	  unsigned char *execaddr - the executing address of the memory
	</programlisting>
      </para>
    </section>
    <section id="PCB *PCB_alloc()">
      <title>PCB *PCB_alloc()</title>
      <para>
	The PCB_alloc function allocates the memory required for a PCB, and
	then returns a pointer to the PCB that it has allocated. The PCB_alloc
	function does not alter the values of the PCB at all. If the memory
	for the PCB could not be allocated, then NULL is returned.
      </para>
    </section>
    <section id="PCB *PCB_setup ( char*, int, int, PCBDLL** )">
      <title>PCB *PCB_setup ( char*, int, int, PCBDLL** )</title>
      <para>
	The PCB_setup function is used to create PCBs. It is passed with the
	following parameters:
	<programlisting>
	  char* - the name of the process (8 characters or less)
	  int - the priority of the process (greater than -127, less than 128)
	  int - the state of the process (APPLICATION or SYSTEM)
	  PCBDLL** - the array of available queues the process may go into
	</programlisting>
      </para>
      <para>
	First, the function makes some sanity checks to make sure the
	parameters are valid (including making sure the name does not match 
	any other processes that are in any queue). Next, the function will 
	call PCB_alloc to allocate the necessary memory. The function will 
	then set the values of the PCB to the values given by the parameters, 
	and then return a pointer to the PCB. If the function failed at any
	point for any reason, NULL will be returned.
      </para>
    </section>
    <section id="PCB *PCB_find ( char*, PCBDLL** )">
      <title>PCB *PCB_find ( char*, PCBDLL** )</title>
      <para>
	The PCB_find function is used to search for a process given the name
	and the queues in which it may exist. It requires the following
	parameters:
	<programlisting>
	  char* - the name of the process (8 characters or less)
	  PCBDLL** - the array of queues which may contain the process
	</programlisting>
      </para>
      <para>
	the PCB_find function will search for a process based on its name in
	the queues provided. The function will iterate through the PCBDLLs, 
	whose length is defined globally by TDF_QUEUES, and follow the pointers
	in each PCBDLL until it matches the name. The function will then
	return a pointer to be PCB if it is found, otherwise it will return
	NULL.
      </para>
    </section>
    <section id="int PCB_insert ( PCBDLL*, PCB* , int )">
      <title>int PCB_insert ( PCBDLL*, PCB* )</title>
      <para>
	The PCB_insert function will insert a PCB into a PCBDLL. This
	function requires the following parameters:
	<programlisting>
	  PCBDLL* - a pointer to the PCBDLL to insert the PCB into
	  PCB* - a pointer to the PCB to be inserterd
	  int - the state which the PCB will be inserted into
	</programlisting>
      </para>
      <para>
	First, the function will check to see if the PCB* parameter is NULL,
	in which case nothing will be inserted and the function will return
	with an error code of 1. Next, a new PCBDLL (which is really just
	an element in the linked list) is allocated to store the new PCB.
	The PCBDLL given by the parameter is then iterated through, and the
	function will determine which is the proper position based on
	the priority of the PCB. Once determined, PCB_insert will then
	update the pointers of the new PCB, and the PCBs around the new PCB
	in the queue. Finally, the state of the PCB will be updated based
	on the parameter. The function will then return 0 if this was 
	successful.
      </para>
    </section>
    <section id="int PCB_remove ( PCB*, PCBDLL** )">
      <title>int PCB_remove ( PCB*, PCBDLL** )</title>
      <para>
	The PCB_remove function will remove a PCB from the queue in which
	it is stored in. The following parameters are required:
	<programlisting>
	  PCB* - the pointer to the PCB to remove
	  PCBDLL** - the array of queues in which a PCB may be located
        </programlisting>
	</para>
      <para>
	The PCB_remove function at first does a sanity check to make sure
	the PCB* parameter is not NULL, otherwise it will return 1. The
	function will then iterate through the array of queues, which is
	of length TDF_QUEUES, until it finds matches the PCB. If it cannot
	find the PCB in the queues, then nothing will be removed and 1 will
	be returned. If the PCB is found, then the surrounding pointers are
	updated and the PCBDLL which formerly contained the PCB is
	deallocated, but the PCB is not deallocated. If successful, a value
	of 0 is returned.
      </para>
    </section>
    <section id="int PCB_free ( PCB* )">
      <title>int PCB_free ( PCB* )</title>
      <para>
	The PCB_free function will deallocate the memory which contained a
	PCB. The following parameter is required:
        <programlisting>
          PCB*- the pointer to the PCB to be deallocted
        </programlisting>
      </para>
      <para>
	If the function is successful, a value of 0 will be returned.
	Otherwise, 1 will be returned.
      </para>
    </section>
    <section id="int PCB_print ( PCB* )">
      <title>int PCB_print ( PCB* )</title>
      <para>
	The PCB_print function will output the contents of a single PCB to
	stdout. The parameter is:
	<programlisting>
	  PCB* - a pointer to the PCB
	</programlisting>
      </para>
      <para>
	The function simply goes through some if statements based
	on the values in the PCB to determine what to print.
      </para>
    </section>
  </section>


  <section id="PCBDLL">
    <title>PCBDLL</title>
    <section id="struct PCBDLL">
      <title>struct PCBDLL</title>
      <para>
        The PCBDLL structure is a doubly linked list with a dummy header
	node. Each PCBDLL is essentially an individual node of the linked
	list with pointers to the previous and next nodes. The PCBDLL
	structure contains the following values:
        <programlisting>
	  struct PCBDLL *prev - the previous element in the list
	  struct PCBDLL *next - the next element in the list
	  PCB *contents - the PCB contents of the current node
        </programlisting>
      </para>
    </section>
    <section id="PCBDLL *PCBDLL_alloc ()">
      <title>PCBDLL *PCBDLL_alloc ()</title>
      The PCBDLL_alloc function takes no parameters, and simply allocates
      the memory required for a single PCBDLL node. The function then returns
      a pointer to the memory location of the new PCBDLL node.    
    </section>
    <section id="PCBDLL **PCBDLL_creation ( int )">
      <title>PCBDLL **PCBDLL_creation ( int )</title>
      <para>
	The PCBDLL_creation function will create an array of PCBDLLs based on
	the given integer parameter (which should be TDF_QUEUES). The
	parameter is as follows:
	<programlisting>
	  int - the number of queues to be created (use TDF_QUEUES)
	</programlisting>
      </para>
      <para>
	If succesful, an array of PCBDLLs is allocated and returned.
      </para>
    </section>
    <section id="int PCBDLL_print ( PCBDLL* )">
      <title>int PCBDLL_print ( PCBDLL* )</title>
      <para>
	The PCBDLL_print function will output the contents of a PCBDLL list
	to stdout. The following parameter is required:
        <programlisting>
	  PCBDLL* - the list to be printed
        </programlisting>
	</para>
      <para>
	The function will follow the pointers in each PCBDLL node and output
	the contents of each valid PCBDLL node, which is the PCB itself.
      </para>
      </section>
  </section>
</chapter>
