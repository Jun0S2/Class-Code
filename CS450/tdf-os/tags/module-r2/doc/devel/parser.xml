<chapter id="MPX Buffer Parser (PARSER.C)">
  <title>TDF Buffer Parser (<filename class="headerfile">PARSER.H</filename>)</title>
  <para>
    Here we describe the utility created to handle parsing the input
    buffer returned by the MPX support command
    <function>sys_req</function>.
  </para>

  <section id="int parse_buffer(char *buffer, char *func_name, char *args);">
    <title>int parse_buffer(char *buffer, char *func_name, char *args);</title>
    <para>
      This function exists for a couple of reasons. First, the buffer
      must be tokenized into separate strings, one of which contains
      the name of the function, and the other which contains the
      arguments passed to the function. Secondly, the shell must be
      able to handle commands that are not perfectly typed into the
      user, such as unnecessary leading whitespaces.
    </para>

    <para>
      <funcsynopsis>
	<funcprototype>
	  <funcdef>
	    int <function>parse_buffer</function>
	  </funcdef>
	  <paramdef>
	    char *<parameter>BUFFER</parameter>
	  </paramdef>
	  <paramdef>
	    char *<parameter>FUNC_NAME</parameter>
	  </paramdef>
	  <paramdef>
	    char *<parameter>ARGUMENTS</parameter>
	  </paramdef>
	</funcprototype>
      </funcsynopsis>
    </para>
  </section>

  <section id="Return values">
    <title>Return Values</title>
 
    <para>
      <function>parse_buffer</function> will walk down a string and
      return one of 4 possible exit codes.
    </para>

    <para>
      <itemizedlist>
	<listitem>
	  <formalpara>
	    <title><parameter>PARSER_FAIL_WHITESPACE</parameter> <returnvalue>-200</returnvalue></title>
	    <para>
	      Indicates that a string is all whitespace and thusly the
	      buffer contains no values to act on.
	    </para>
	  </formalpara>
	</listitem>
	<listitem>
          <formalpara>
	    <title><parameter>PARSER_FAIL_LONGNAME</parameter> <returnvalue>-201</returnvalue></title>
	    <para>
	      Indicates the command found in the buffer after parsing
	      is over the maximum allowed length for a command name.
	    </para>
	  </formalpara>
	</listitem>
	<listitem>
	  <formalpara>
	    <title><parameter>PARSER_WIN_SINGLETON</parameter> <returnvalue>210</returnvalue></title>
	    <para>
	      The buffer has been parsed successfully and only
	      contains one string. This string is the command
	      name. There are no arguments to pass to the called
	      function, a NULL chraracter array should be passed
	      instead.
	    </para>
	  </formalpara>
	</listitem>
	<listitem>
	  <formalpara>
	    <title><parameter>PARSER_WIN_HAS_ARGS</parameter> <returnvalue>211</returnvalue></title>
	    <para>
	      The buffer has been parsed successfully and contains a
	      command name as well as a variable length string
	      contains all the arguments to run the command with. The
	      argument string will contain no leading or ending
	      whitespace.
	    </para>
	  </formalpara>
	</listitem>
      </itemizedlist>
    </para>

  </section>

  <section id="Description">
    <title>Description</title>

    <para>
      Perhaps the best way to illustrate how parse_buffer works is
      with an example. If the buffer string supplanted by the user is
      as follows (with each character being represented inside of the
      brackets):
      <programlisting>
	[ ][d][a][t][e][ ][ ][-][s][ ][2][0][0][9][ ][ ][-][h][ ][ ][\n][\0]
      </programlisting>
      Then, parse_buffer will tokenize the string into two separate strings,
      which are:
      <programlisting>
	[d][a][t][e][\0]
	[-][s][ ][2][0][0][9][ ][ ][-][h][\0]
      </programlisting>
      Therefore, it will remove the whitespaces before the function name and
      between the function name and the first argument, but nothing else.
    </para>
  </section>

</chapter>
